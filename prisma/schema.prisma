// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          String           @id @default(cuid())
  email       String           @unique
  name        String?
  password    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  accounts    Account[]
  analytics   Analytics[]
  posts       Post[]
  preferences UserPreferences?
}

model Account {
  id               String    @id @default(cuid())
  userId           String
  platform         String
  accessToken      String
  refreshToken     String?
  expiresAt        DateTime?
  platformUsername String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model Post {
  id           String      @id @default(cuid())
  userId       String
  content      String
  mediaUrls    String[]
  platforms    String[]
  status       String
  scheduledFor DateTime?
  publishedAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  analytics    Analytics[]
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  timezone           String   @default("UTC")
  postFrequency      Int      @default(1)
  preferredPostTimes String[]
  industryType       String?
  contentPreferences Json?
  brandVoice         String?
  brandKeywords      String[]
  autoSchedule       Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  platform  String
  metric    String
  value     Int
  timestamp DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
